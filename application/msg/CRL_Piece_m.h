//
// Generated file, do not edit! Created by nedtool 5.5 from application/msg/CRL_Piece.msg.
//

#ifndef __VEINS_CRL_PIECE_M_H
#define __VEINS_CRL_PIECE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "veins/modules/messages/BaseFrame1609_4_m.h"
// }}


namespace veins {

/**
 * Class generated from <tt>application/msg/CRL_Piece.msg:14</tt> by nedtool.
 * <pre>
 * packet CRL_Piece extends BaseFrame1609_4
 * {
 *     LAddress::L2Type sender = -1;
 *     int CRLversion;
 *     int Timestamp;
 *     int SeqNo;
 *     int CAid;
 *     int pad;
 *     // cArray Array_CRL;
 *     string payload;
 *   // pType payload;
 * }
 * </pre>
 */
class CRL_Piece : public ::veins::BaseFrame1609_4
{
  protected:
    LAddress::L2Type sender;
    int CRLversion;
    int Timestamp;
    int SeqNo;
    int CAid;
    int pad;
    ::omnetpp::opp_string payload;

  private:
    void copy(const CRL_Piece& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CRL_Piece&);

  public:
    CRL_Piece(const char *name=nullptr, short kind=0);
    CRL_Piece(const CRL_Piece& other);
    virtual ~CRL_Piece();
    CRL_Piece& operator=(const CRL_Piece& other);
    virtual CRL_Piece *dup() const override {return new CRL_Piece(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual LAddress::L2Type& getSender();
    virtual const LAddress::L2Type& getSender() const {return const_cast<CRL_Piece*>(this)->getSender();}
    virtual void setSender(const LAddress::L2Type& sender);
    virtual int getCRLversion() const;
    virtual void setCRLversion(int CRLversion);
    virtual int getTimestamp() const;
    virtual void setTimestamp(int Timestamp);
    virtual int getSeqNo() const;
    virtual void setSeqNo(int SeqNo);
    virtual int getCAid() const;
    virtual void setCAid(int CAid);
    virtual int getPad() const;
    virtual void setPad(int pad);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CRL_Piece& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CRL_Piece& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_CRL_PIECE_M_H

