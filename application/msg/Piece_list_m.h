//
// Generated file, do not edit! Created by nedtool 5.5 from application/msg/Piece_list.msg.
//

#ifndef __VEINS_PIECE_LIST_M_H
#define __VEINS_PIECE_LIST_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "veins/modules/messages/BaseFrame1609_4_m.h"
// }}


namespace veins {

/**
 * Class generated from <tt>application/msg/Piece_list.msg:10</tt> by nedtool.
 * <pre>
 * packet Piece_list extends BaseFrame1609_4
 * {
 *     LAddress::L2Type sender = -1;
 *     int serial;
 *     string list;
 * }
 * </pre>
 */
class Piece_list : public ::veins::BaseFrame1609_4
{
  protected:
    LAddress::L2Type sender;
    int serial;
    ::omnetpp::opp_string list;

  private:
    void copy(const Piece_list& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Piece_list&);

  public:
    Piece_list(const char *name=nullptr, short kind=0);
    Piece_list(const Piece_list& other);
    virtual ~Piece_list();
    Piece_list& operator=(const Piece_list& other);
    virtual Piece_list *dup() const override {return new Piece_list(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual LAddress::L2Type& getSender();
    virtual const LAddress::L2Type& getSender() const {return const_cast<Piece_list*>(this)->getSender();}
    virtual void setSender(const LAddress::L2Type& sender);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
    virtual const char * getList() const;
    virtual void setList(const char * list);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Piece_list& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Piece_list& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_PIECE_LIST_M_H

